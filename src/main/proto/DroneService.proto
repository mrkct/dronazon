syntax = "proto3";
package it.cutecchia.sdp.drones.grpc;


message Empty {}

message CityPointPacket {
  int32 x = 1;
  int32 y = 2;
}

message DroneIdentifierPacket {
  int32 id = 1;
  string address = 2;
  int32 port = 3;
}

message OrderPacket {
  int32 id = 1;
  CityPointPacket starting_point = 2;
  CityPointPacket delivery_point = 3;
}

message DroneDataPacket {
  int32 battery_percentage = 1;
  CityPointPacket position = 2;
  OrderPacket assigned_order = 3;
  bool can_accept_orders = 4;
}

// Messages

message DroneJoinMessage {
  DroneIdentifierPacket sender = 1;
  CityPointPacket starting_position = 2;
}

message DroneJoinResponse {
  DroneIdentifierPacket sender = 1;
  bool is_master = 2;
}

message AssignOrderMessage {
  OrderPacket order = 1;
}

message AssignOrderResponse {
  bool accepted = 1;
}

message CompletedDeliveryMessage {
  uint64 timestamp = 1;
  DroneIdentifierPacket sender = 2;
  OrderPacket completed_order = 3;

  double travelled_kms = 4;
  repeated double pollution = 5;
  int32 battery_percentage = 6;
}

message DataRequestResponse {
  DroneIdentifierPacket drone = 1;
  DroneDataPacket data = 2;
}

message ElectionMessage {
  DroneIdentifierPacket candidate_leader = 1;
  int32 candidate_leader_battery_percentage = 2;
}

message ElectedMessage {
  DroneIdentifierPacket new_leader = 1;
}

message LockRequestMessage {
  int32 logical_clock = 1;
  DroneIdentifierPacket requester = 2;
}

service DroneService {
  // Used by all drones
  rpc NotifyDroneJoin(DroneJoinMessage) returns (DroneJoinResponse);
  rpc AssignOrder(AssignOrderMessage) returns (AssignOrderResponse);
  rpc RequestData(Empty) returns (DroneDataPacket);
  rpc NotifyElectionMessage(ElectionMessage) returns (Empty);
  rpc NotifyElectedMessage(ElectedMessage) returns (Empty);
  rpc RequestHeartbeat(Empty) returns (Empty);
  rpc RequestLock(LockRequestMessage) returns (Empty);

  // Used only on the master
  rpc NotifyCompletedDelivery(CompletedDeliveryMessage) returns (Empty);
  rpc NotifyCompletedCharging(DroneIdentifierPacket) returns (Empty);
}